{% if UPSTREAMS is defined %}
{% set upstream_list = UPSTREAMS.split(',') %}
{% for up in upstream_list %}
{% set target = up.split(':') %}
  upstream {{ target[0] }} {
    server {{ target[1] }}:{{target[2]}} fail_timeout={{ UPSTREAMS_TIMEOUT|default(5, true) }}s max_fails={{ UPSTREAMS_FAILS|default(6, true) }};
  }
{% endfor %}
{% endif %}

  {% if CLIENT_BODY_SIZE is defined %}
    client_max_body_size {{ CLIENT_BODY_SIZE }};
  {% endif %}
  
{% if FLOOD is defined and FLOOD == 'true' %}
    limit_req_zone $binary_remote_addr zone=flood:10m rate={{ FLOOD_RATE|default('5', true) }}r/s;
{% endif %}

{% if REAL_IP is defined and REAL_IP == 'true' %}
    real_ip_header X-Forwarded-For;
    proxy_ignore_client_abort on;
{% set cidrs = REAL_IP_CIDR.split(',') %}
{% for cidr in cidrs %}
    set_real_ip_from {{ cidr }};
{% endfor %}
{% endif %}

{% if STATS is defined and STATS == 'true' %}
server {
    listen {{ STATS_PORT|default(9080, true) }};
    server_name 127.0.0.1;

    # nginx stats for monitoring
    location /nginx_status {
        stub_status on;       # Turn on nginx stats
        access_log   off;     # We do not need logs for stats
        allow 127.0.0.1;      # Security: Only allow access from IP
        deny all;             # Deny requests from the other of the world
    }
}
{% endif %}

{#
{% if USE_OAUTH is defined and USE_OAUTH == 'true' %}
server {
    listen 0.0.0.0:{{ OAUTH_NGINX_PORT|default(80, true) }} default_server;
    server_name _;

    location / {
      proxy_pass http://{{ OAUTH_URL|default('127.0.0.1', true) }}:{{ OAUTH_PORT|default(4180, true) }};
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 1;
      proxy_send_timeout 30;
      proxy_read_timeout 30;
      proxy_set_header X-Auth-Request-Redirect $request_uri;

  }
}
{% endif %}
#}
server {
    listen      0.0.0.0:{{ NGINX_PORT|default(80, true) }} default_server;
    server_name  {{ NGINX_SERVER_NAME|default('_', true) }};

    {% if ELB_HC is defined and ELB_HC == 'true' %}
    location /elb-status {
      access_log off;
      return 200 'A-OK!';
      # because default content-type is application/octet-stream,
      # browser will offer to "save the file"...
      # the next line allows you to see it in the browser so you can test 
      add_header Content-Type text/plain;
    }
    {% endif %}

    {% if DROP_PHP is defined and DROP_PHP == 'true' %}
    location ~ \.php {
      deny all;
    }
    {% endif %}

    {% if STATICS is defined and STATICS == 'true' %}
    location /{{ STATICS_LOCATION|default(statics, true) }} {
        alias /data/staticserve;
        expires 1d;
    }
    {% endif %}

    {% if USE_AUTH is defined and USE_AUTH == 'true' %}
    auth_basic "Please log in to proceed";
    auth_basic_user_file /etc/nginx/htpasswd;
    {% endif %}

    {% if USE_HTTPS_REDIR is defined and USE_HTTPS_REDIR == 'true' %}
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$server_name$request_uri;
      }
    {% endif %}

    {% if UPSTREAMS is defined %}
    {% set location_list = UPSTREAMS_LOCATIONS.split(',') %}
    {% for loc in location_list %}
    {% set upstream_list = UPSTREAMS.split(',') %}
    {% set target = upstream_list[loop.index0].split(':') %}
    location {{ loc|default('/', true) }} {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      uwsgi_pass {{ target[0] }};
      include /etc/nginx/conf.d/uwsgi_params;
      {% if FLOOD is defined and FLOOD == 'true' %}
      limit_req zone=flood nodelay;
      {% endif %}
    }
    {% endfor %}
    {% endif %}
      

    {% if PROXY_TARGETS is defined %}
    {% set location_list = PROXY_LOCATIONS.split(',') %}
    {% for loc in location_list %}
    {% set proxy_list = PROXY_TARGETS.split(',') %}
    {% set target = proxy_list[loop.index0].split(':') %}
    location {{ loc|default('/', true) }} {
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://{{ target[0] }}:{{ target[1] }};
      {% if FLOOD is defined and FLOOD == 'true' %}
      limit_req zone=flood nodelay;
      {% endif %}
      {% if BUFFER_OFF is defined and BUFFER_OFF == 'true' %}
      proxy_buffering off;
      {% endif %}
    }
    {% endfor %}
    {% endif %}

    {% if UPLOADS is defined and UPLOADS == 'true' %}
    location /uploads {
      alias /data/uploads;
    }
    {% endif %}

    {% if (PROXY_TARGETS is not defined) and (UPSTREAMS is not defined) %}
    location / {
      root /var/www/localhost/htdocs;
      index index.html;
    }
    {% endif %}
}